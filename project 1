import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
dataset=pd.read_csv('Data.csv')
X=dataset.iloc[: , :-1].values
y=dataset.iloc[:,-1].values
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
imputer.fit(X[:, 1:3])
X[:, 1:3] = imputer.transform(X[:, 1:3])
print(X)
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')
X = np.array(ct.fit_transform(X))
print(X)
# Encoding the Dependent Variable
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = le.fit_transform(y)
print(y)

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=0)

# Standardize features (not necessary for all classifiers, but can be beneficial)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Logistic Regression
log_reg = LogisticRegression()
log_reg.fit(X_train, y_train)
y_pred_log_reg = log_reg.predict(X_test)
accuracy_log_reg = accuracy_score(y_test, y_pred_log_reg)
conf_matrix_lg = confusion_matrix(y_test, y_pred_log_reg)
print("logistic:",accuracy_log_reg)
print("logistic:",conf_matrix_lg)

# K-Nearest Neighbors (KNN)
knn = KNeighborsClassifier(n_neighbors=5)  # You can adjust the number of neighbors
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_test)
accuracy_knn = accuracy_score(y_test, y_pred_knn)
conf_matrix_knn = confusion_matrix(y_test, y_pred_knn)
print(" K-Nearest Neighbors (KNN):",accuracy_knn)
print(" K-Nearest Neighbors (KNN):",conf_matrix_knn)

# Support Vector Machine (SVM)
svm = SVC(kernel='linear')  # You can choose different kernels
svm.fit(X_train, y_train)
y_pred_svm = svm.predict(X_test)
accuracy_svm = accuracy_score(y_test, y_pred_svm)
conf_matrix_svm = confusion_matrix(y_test, y_pred_svm)
print("Support Vector Machine (SVM):",accuracy_svm)
print("Support Vector Machine (SVM):",conf_matrix_svm)

# Decision Tree
decision_tree = DecisionTreeClassifier()
decision_tree.fit(X_train, y_train)
y_pred_decision_tree = decision_tree.predict(X_test)
accuracy_decision_tree = accuracy_score(y_test, y_pred_decision_tree)
conf_matrix_decision_tree = confusion_matrix(y_test, y_pred_decision_tree)
print("Decision Tree:",accuracy_decision_tree)
print("Decision Tree:",conf_matrix_decision_tree)
# Random Forest
random_forest = RandomForestClassifier(n_estimators=100)  # You can adjust the number of trees
random_forest.fit(X_train, y_train)
y_pred_random_forest = random_forest.predict(X_test)
accuracy_random_forest = accuracy_score(y_test, y_pred_random_forest)
conf_matrix_random_forest = confusion_matrix(y_test, y_pred_random_forest)
print(" Random Forest:",accuracy_random_forest)
print(" Random Forest:",conf_matrix_random_forest)

print("france:",log_reg.predict([[1,0,0,40,0]]))
print("spain: ",log_reg.predict([[0,1,0,40,0]]))
print("germany: ",log_reg.predict([[0,0,1,40,0]]))

print("france:",log_reg.predict([[1,0,0,30,87000]]))
print("spain: ",log_reg.predict([[0,1,0,30,87000]]))
print("germany: ",log_reg.predict([[0,0,1,30,87000]]))

print("france:",log_reg.predict([[1,0,0,40,100000]]))
print("spain: ",log_reg.predict([[0,1,0,40,100000]]))
print("germany: ",log_reg.predict([[0,0,1,40,100000]]))

print("france:",log_reg.predict([[1,0,0,50,0]]))
print("spain: ",log_reg.predict([[0,1,0,50,0]]))
print("germany: ",log_reg.predict([[0,0,1,50,0]]))

print("france:",log_reg.predict([[1,0,0,18,0]]))
print("spain: ",log_reg.predict([[0,1,0,18,0]]))
print("germany: ",log_reg.predict([[0,0,1,18,0]]))

print("france:",log_reg.predict([[1,0,0,22,600000]]))
print("spain: ",log_reg.predict([[0,1,0,22,600000]]))
print("germany: ",log_reg.predict([[0,0,1,22,600000]]))

print("france:",log_reg.predict([[1,0,0,35,2500000]]))
print("spain: ",log_reg.predict([[0,1,0,35,2500000]]))
print("germany: ",log_reg.predict([[0,0,1,35,2500000]]))

print("france:",log_reg.predict([[1,0,0,60,1000000000]]))
print("spain: ",log_reg.predict([[0,1,0,60,1000000000]]))
print("germany: ",log_reg.predict([[0,0,1,60,1000000000]]))
